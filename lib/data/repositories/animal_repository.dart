import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:fitpass_kz/features/home/models/animal_model.dart';

class AnimalRepository {
  final _db = FirebaseFirestore.instance;

  // üîµ Firestore-–¥–∞–Ω real-time –∂–∞“£–∞—Ä—É “Ø—à—ñ–Ω stream “õ–æ–ª–¥–∞–Ω—É
  Stream<List<Animal>> getAnimalsStream() {
    return _db.collection("animals").snapshots().map((snapshot) {
      return snapshot.docs.map((doc) {
        return Animal.fromMap(doc.id, doc.data() as Map<String, dynamic>);
      }).toList();
    });
  }

  // üîµ Firestore-–¥–∞–Ω –∂–∞–Ω—É–∞—Ä–ª–∞—Ä–¥—ã –±—ñ—Ä —Ä–µ—Ç –∞–ª—É (real-time –µ–º–µ—Å)
  Future<List<Animal>> fetchAnimals() async {
    try {
      QuerySnapshot snapshot = await _db.collection("animals").get();
      return snapshot.docs.map((doc) {
        return Animal.fromMap(doc.id, doc.data() as Map<String, dynamic>);
      }).toList();
    } catch (e) {
      throw Exception("‚ùå –ú”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ –∂“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ: $e");
    }
  }

  // üîµ Firestore-“ì–∞ –∂–∞“£–∞ –∂–∞–Ω—É–∞—Ä “õ–æ—Å—É
  Future<void> addAnimal(Animal animal) async {
    try {
      DocumentReference docRef = await _db.collection("animals").add(animal.toMap());
      await docRef.update({"id": docRef.id});
    } catch (e) {
      throw Exception("‚ùå –ú”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä–¥—ñ “õ–æ—Å—É “õ–∞—Ç–µ—Å—ñ: $e");
    }
  }
}
